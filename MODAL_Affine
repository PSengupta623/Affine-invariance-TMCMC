
function [out_Affine] = MODAL_Affine(sys_para)

tmp_t = tic;


runinfo.gen = 0; 
runinfo.p = 0; 
runinfo.TF_fin = false; 
runinfo.cov_s = []; 


if sys_para.TF_prop_pri
    runinfo.theta = sys_para.prop_theta;
elseif sys_para.pri.TF_custom
    runinfo.theta = feval(sys_para.pri.name_custom_rnd,...
        sys_para.pri.para_custom_rnd);
else
    runinfo.theta = zeros(sys_para.N_s,sys_para.N_dim);
    for i = 1:sys_para.N_dim
        switch length(sys_para.pri.para{i})
            case 1
                runinfo.theta(:,i) = random(sys_para.pri.name{i},...
                    sys_para.pri.para{i},sys_para.N_s,1);
            case 2
                runinfo.theta(:,i) = random(sys_para.pri.name{i},...
                    sys_para.pri.para{i}(1),sys_para.pri.para{i}(2),...
                    sys_para.N_s,1);
            case 3
                runinfo.theta(:,i) = random(sys_para.pri.name{i},...
                    sys_para.pri.para{i}(1),sys_para.pri.para{i}(2),...
                    sys_para.pri.para{i}(3),sys_para.N_s,1);
        end
    end
end



while runinfo.gen < sys_para.max_gen
    
    runinfo.gen = runinfo.gen + 1;
    
   
    [out_Affine] = assemble(runinfo,sys_para);
    
    [runinfo] = Collect_Affine(out_Affine,runinfo,sys_para);
   
    if runinfo.TF_fin
        
        runinfo.lnEv = sum(runinfo.S_lnEv);
        break
    else
        [runinfo] = Calc_Stat(runinfo,sys_para);
    end
    
    
    if sys_para.TF_msg
        fprintf('Affine: Stage %d completed (p = %.2e)\n',runinfo.gen,...
            runinfo.p(runinfo.gen));
    end
    if sys_para.TF_save
        save(['MODAL_gen_',num2str(runinfo.gen),'.mat'],'runinfo')
        if sys_para.TF_msg
            fprintf('   Stage %d saved\n',runinfo.gen);
        end
    end
end


out_Affine = runinfo;
   
tmp = runinfo.Ns/sum(runinfo.Ns);
out_Affine.mean_fin = tmp' * runinfo.theta;
out_Affine.cov_fin = runinfo.theta - ...
    repmat(tmp'*runinfo.theta,size(runinfo.theta,1),1); 
out_Affine.cov_fin = out_Affine.cov_fin' * (out_Affine.cov_fin .* ...
    repmat(tmp,1,sys_para.N_dim));
out_Affine.cov_fin = 0.5 * (out_Affine.cov_fin + out_Affine.cov_fin');

out_Affine.runtime = toc(tmp_t);

save('MODAL_output.mat','out_Affine','sys_para');
if sys_para.TF_msg
    if runinfo.TF_fin
        fprintf('Affine: Final stage finished successfully\n');
    else
        fprintf('Affine: Max. stages reached, program exited\n');
    end
    fprintf('   Final results saved in MODAL_output.mat\n');
end

end



function [out_Affine] = assemble(runinfo,sys_para)


Affine = struct;
Affine(sys_para.N_cpu).N_invariant = 0;


if runinfo.gen == 1
    
    N_invariant = zeros(sys_para.N_cpu,1);
    N_invariant(1:mod(sys_para.N_s,sys_para.N_cpu)) = 1;
    N_invariant = N_invariant + floor(sys_para.N_s/sys_para.N_cpu);
    
    
    tmp = 0;
    for i = 1:sys_para.N_cpu
        Affine(i).N_invariant = N_invariant(i);
        Affine(i).theta = runinfo.theta(tmp+1:tmp+N_invariant(i),:);
        Affine(i).len = ones(N_invariant(i),1);
        
        tmp = tmp + N_invariant(i);
    end
    
    if sys_para.TF_msg
        fprintf('Affine: Stage 1 affine\n')
    end
    
else
   
    if runinfo.TF_fin
        len_chain = mnrnd(sys_para.N_s_fin,runinfo.w)';

    else
        len_chain = mnrnd(sys_para.N_s,runinfo.w)';

    end
    
   
    [invariant_ind,invariant_len,stat] = ...
        Affine_Balancing(len_chain,sys_para.N_cpu,sys_para.max_cLen);
    
 
    for i = 1:sys_para.N_cpu
        Affine(i).N_invariant = length(invariant_ind{i});
        Affine(i).theta = runinfo.theta(invariant_ind{i},:);
        Affine(i).len = invariant_len{i};
        Affine(i).lik = runinfo.lik(invariant_ind{i},:);
        Affine(i).pri = runinfo.pri(invariant_ind{i},:);
        Affine(i).out_lik = runinfo.out_lik(invariant_ind{i});
    end
    
    if sys_para.TF_msg
        fprintf('Affine: Stage %d Affine\n',runinfo.gen);
        fprintf('   Mean invariant length = %f, std = %f\n',stat.mean,stat.std);
        tmp = [];
        for i = 1:sys_para.N_cpu
            if Affine(i).N_invariant == 0
                tmp(end+1) = i;
            end
        end
        if ~isempty(tmp)
            fprintf('   Warning: Affine');
            fprintf(' %d',tmp);
            fprintf(' has 0 invariants\n');
        end
    end
end

out_Affine = cell(sys_para.N_cpu,1);

local_info.gen = runinfo.gen;
local_info.p = runinfo.p;
local_info.cov_s = runinfo.cov_s;
if sys_para.N_cpu > 1
    parfor i = 1:sys_para.N_cpu
        out_Affine{i} = MODAL_Affine(i,Affine(i),sys_para,local_info);
    end

    
else
    for i = 1:sys_para.N_cpu
        out_Affine{i} = MODAL_MDS(i,Affine(i),sys_para,local_info);
    end
end

end



function [invariant_ind,invariant_len,stat] = Affine_Balancing(len_chain,N_cpu,max_cLen)
   
    ind_bad = find(len_chain > max_cLen);
    ind_cLen = [1:length(len_chain)]'; 
    ind_cLen(ind_bad) = [];
    cLen_full = len_chain;
    cLen_full(ind_bad) = [];
    
       for i = 1:length(ind_bad)
        tmp = floor(len_chain(ind_bad(i))/max_cLen);
        if mod(len_chain(ind_bad(i)),max_cLen) ~= 0
            tmp = tmp + 1;
        end
        len = length(cLen_full);
        cLen_full(len+1:len+tmp) = floor(len_chain(ind_bad(i))/tmp);
        ind_cLen(len+1:len+tmp) = ind_bad(i);
        
        tmp = mod(len_chain(ind_bad(i)),tmp);
        if tmp ~= 0
            cLen_full(len+1:len+tmp) = cLen_full(len+1:len+tmp) + 1;
        end
    end
    
    invariant_ind = cell(N_cpu,1);
    invariant_len = cell(N_cpu,1);
    cpu_load = zeros(N_cpu,1);
    [cLen_sort,tmp] = sort(cLen_full,'descend'); % zeros at the end
    ind_cLen = ind_cLen(tmp);
        
    for i = 1:sum(cLen_sort > 0)
        [~,tmp] = min(cpu_load);
        cpu_load(tmp) = cpu_load(tmp) + cLen_sort(i);
        invariant_ind{tmp}(end+1) = ind_cLen(i);
        invariant_len{tmp}(end+1) = cLen_sort(i);
    end
    
    
    stat.mean = mean(cpu_load);
    stat.std = std(cpu_load);
end



function [runinfo] = Collect_Affine(out_Affine,runinfo,sys_para)


tmp = 0;
for i = 1:sys_para.N_cpu
    for j = 1:length(out_Affine{i})
        tmp = tmp + length(out_Affine{i}(j).Ns);
    end
end

runinfo.theta = zeros(tmp,sys_para.N_dim);
runinfo.Ns = zeros(tmp,1);
runinfo.pri = zeros(tmp,1);
runinfo.lik = zeros(tmp,1);
runinfo.out_lik = cell(tmp,1);
runinfo.N_accept(runinfo.gen) = 0;
runinfo.N_reject(runinfo.gen) = 0;

tmp = 0;
for i = 1:sys_para.N_cpu
    for j = 1:length(out_Affine{i})
        len_out = length(out_Affine{i}(j).Ns);
        runinfo.theta(tmp+1:tmp+len_out,:) = out_Affine{i}(j).theta;
        runinfo.Ns(tmp+1:tmp+len_out) = out_Affine{i}(j).Ns;
        runinfo.pri(tmp+1:tmp+len_out) = out_Affine{i}(j).pri;
        runinfo.lik(tmp+1:tmp+len_out) = out_Affine{i}(j).lik;
        runinfo.out_lik(tmp+1:tmp+len_out) = out_Affine{i}(j).out_lik;
        runinfo.N_accept(runinfo.gen) = ...
            runinfo.N_accept(runinfo.gen) + out_Affine{i}(j).N_accept;
        runinfo.N_reject(runinfo.gen) = ...
            runinfo.N_reject(runinfo.gen) + out_Affine{i}(j).N_reject;

        tmp = tmp + len_out;
    end
end

end



function [runinfo] = Calc_Stat(runinfo,sys_para)

if logical(sys_para.N_gen_minP) && ...
        (runinfo.gen <= sys_para.N_gen_minP)
    tmp_min = sys_para.minP(min(runinfo.gen,length(sys_para.minP)));
else
    tmp_min = 0;
end
if logical(sys_para.N_gen_maxP) && ...
        (runinfo.gen <= sys_para.N_gen_maxP)
    tmp_max = sys_para.maxP(min(runinfo.gen,length(sys_para.maxP)));
else
    tmp_max = 1;
end


if sys_para.TF_anneal_pri
    lnf = runinfo.lik + runinfo.pri;
else
    lnf = runinfo.lik;
end
    
tmp = find(runinfo.Ns > 1);
for i = 1:length(tmp)
    lnf(end+1:end+runinfo.Ns(tmp(i))-1) = lnf(tmp(i));
end
   
[runinfo.p(runinfo.gen+1),runinfo.cv_err2(runinfo.gen)] = fmincon(@(x) ...
    Objlogp(x,lnf,runinfo.p(runinfo.gen),sys_para.cv_tol),...
    runinfo.p(runinfo.gen)+tmp_min+sys_para.opt_iniP,[],[],[],[],...
    runinfo.p(runinfo.gen)+tmp_min,runinfo.p(runinfo.gen)+tmp_max,...
    [],sys_para.opt_setup);

if runinfo.p(runinfo.gen+1) >= 1
    runinfo.TF_fin = true;
    runinfo.p(runinfo.gen+1) = 1;
end

if sys_para.TF_anneal_pri
    if runinfo.gen == 1
        if sys_para.TF_prop_pri
            tmp = max( (runinfo.lik+runinfo.pri)*...
                runinfo.p(runinfo.gen+1) - sys_para.prop_val);
            runinfo.w = exp( (runinfo.lik+runinfo.pri)*...
                runinfo.p(runinfo.gen+1) - sys_para.prop_val - tmp );
        else
            tmp = max( (runinfo.lik+runinfo.pri)*...
                runinfo.p(runinfo.gen+1) - runinfo.pri);
            runinfo.w = exp( (runinfo.lik+runinfo.pri)*...
                runinfo.p(runinfo.gen+1) - runinfo.pri - tmp );
        end
    else
        tmp = max( (runinfo.lik+runinfo.pri)*(runinfo.p(runinfo.gen+1)...
            - runinfo.p(runinfo.gen)) );
        runinfo.w = exp( (runinfo.lik+runinfo.pri)*...
            (runinfo.p(runinfo.gen+1)-runinfo.p(runinfo.gen)) - tmp );
    end
else
    if (runinfo.gen == 1) && sys_para.TF_prop_pri
        tmp = max( runinfo.lik*runinfo.p(runinfo.gen+1) + runinfo.pri...
            - sys_para.prop_val);
        runinfo.w = exp( runinfo.lik*runinfo.p(runinfo.gen+1) + ...
            runinfo.pri - sys_para.prop_val - tmp );
    else
        tmp = max( runinfo.lik*(runinfo.p(runinfo.gen+1)...
            - runinfo.p(runinfo.gen)) );
        runinfo.w = exp( runinfo.lik*...
            (runinfo.p(runinfo.gen+1)-runinfo.p(runinfo.gen)) - tmp );
    end
end

runinfo.w = runinfo.w .* runinfo.Ns;

runinfo.S_lnEv(runinfo.gen) = log(sum(runinfo.w))+tmp-log(sys_para.N_s);

runinfo.w = runinfo.w / sum(runinfo.w);


runinfo.cov_s = runinfo.theta - ...
    repmat(runinfo.w'*runinfo.theta,size(runinfo.theta,1),1); 
    
runinfo.cov_s = runinfo.cov_s' * (runinfo.cov_s .* ...
    repmat(runinfo.w,1,sys_para.N_dim)); 
    
runinfo.cov_s = (sys_para.beta2 * 0.5) * ...
    (runinfo.cov_s + runinfo.cov_s'); 
    
end



function [CoefVar] = Objlogp(x,fj,pj,tol)
    fjmax = max(fj);
    q = exp( (fj-fjmax)*(x-pj) );
    q = q / sum(q);
    
    CoefVar = (std(q)/mean(q) - tol)^2;  
end

